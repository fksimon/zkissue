/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package zkissue;

import java.util.Collection;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.apache.curator.utils.CloseableUtils;
import org.apache.curator.x.discovery.ServiceDiscovery;
import org.apache.curator.x.discovery.ServiceDiscoveryBuilder;
import org.apache.curator.x.discovery.ServiceInstance;
import org.apache.curator.x.discovery.UriSpec;
import org.apache.curator.x.discovery.details.JsonInstanceSerializer;
import org.apache.zookeeper.KeeperException;

public class App {

    private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery, String serviceName) throws Exception {
        System.out.println("Query instances for service " + serviceName);
        try {
            Collection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);
            System.out.println(serviceName);
            for (ServiceInstance<InstanceDetails> instance : instances) {
                System.out.println("\t" + instance.getPayload().getDescription() + ": " + instance.buildUriSpec());
            }
        } catch (KeeperException.NoNodeException e) {
            System.err.println("There are no registered instances.");
        }
    }

    public static void main(String[] args) throws Exception {
        String connectionString = System.getenv("ZOOKEEPER_CONNECTION");
        String basePath = System.getenv("BASE_PATH");
        String serviceName = System.getenv("SERVICE_NAME");
        String server = System.getenv("SERVER");

        CuratorFramework client = null;
        ServiceDiscovery<InstanceDetails> serviceDiscovery = null;
        ServiceInstance<InstanceDetails> thisInstance;

        try {
            System.out.println("Connecting to " + connectionString);
            client = CuratorFrameworkFactory.newClient(connectionString, new ExponentialBackoffRetry(1000, 3));
            client.start();

            JsonInstanceSerializer<InstanceDetails> serializer = new JsonInstanceSerializer<InstanceDetails>(InstanceDetails.class);

            // in a real application, you'd have a convention of some kind for the URI layout
            UriSpec uriSpec = new UriSpec("{scheme}://server-" + server + ":{port}");

            thisInstance = ServiceInstance.<InstanceDetails>builder().name(serviceName).payload(new InstanceDetails("service description"))
                        .port((int) (65535 * Math.random())) // in a real application, you'd use a common port
                        .uriSpec(uriSpec).build();

            System.out.println("Register server-" + server + " for service " + serviceName);
            serviceDiscovery =
                        ServiceDiscoveryBuilder.builder(InstanceDetails.class).client(client).basePath(basePath).serializer(serializer)
                                    .thisInstance(thisInstance).build();

            serviceDiscovery.start();

            while (true) {
                listInstances(serviceDiscovery, serviceName);
                Thread.sleep(1000 * 5);
            }

        } finally {
            CloseableUtils.closeQuietly(serviceDiscovery);
            CloseableUtils.closeQuietly(client);
        }
    }

}
